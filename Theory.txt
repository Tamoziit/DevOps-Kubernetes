**KUBERNETES** 
-- Container orchestration system.

#Kubernetes(K8S) deals with ->
- Automatic deployments of the containerized application across different servers.
- Distribution of the load across multiple servers.
- Auto-scaling of the deployed applications.
- Monitoring & health check of the containers.
- Replacements of the failed containers.

#Runtimes supported by Kubernetes ->
- Docker
- CRI-O
- containerd

**Terminologies & Architecture
--> *Pod* - It is the smallest unit of a Kubernetes cluster (analogous: Docker container). 
--> A Pod may contain --> multiple containers, Shared volumes, shared IP Address.
--> *Kubernetes Cluster* --> Contains different nodes (servers) [which in-turn house different pods].
|
|
V
Kubernetes cluster contains 2 types of nodes :
1. Master Node : Orchestrates the worker nodes, by distributing the load among the worker loads.
2. Worker Node : Carries out the operation/load assigned to it by master node.

--> Master node contains --> API server, Scheduler, Kube Controller Manager, Cloud Controller Manager, etcd, DNS Services, kubelet, kube-proxy, container runtime.
--> Worker node contains --> kubelet, kube-proxy, container runtime.
--> Master node communicates with the kubelet of the worker nodes through its API server.
--> kube-proxy is responsible for the network connection of each node.
--> Scheduler - Orchestrates & manages the load distribution among different worker nodes.
--> Kube Controller Manager - Controls the functioning of each node of a Kubernetes cluster.
--> Cloud Controller Manager - Deals with the cloud services for our deployment server (including auto-scaling the deployment). It also manages all the proxy/IP address for the web to communicate with our server.
--> etcd - stores all deployment logs as key value pairs.
--> DNS Services - Responsible for names resolution in the entire Kubernetes cluster. It can be used to connect 2 different services by their names.

--> kubectl --> Kube control -> A CLI tool to control kubernetes cluster. --> HTTPS comms. b/w API Server of master node of a kube cluster & kubectl.


**Kubernetes using Minikube package manager
#CLI commands
--> minikube start --driver=hyperv --> Spins up a Kubernetes cluster through minikube inside a virtual env., here - Hyper-V (for windows).
--> minikube ip --> returns the ip on which minikube is running.
--> ssh docker@<minikube-ip> --> spins up ssh to access the minikube server over the web.
--> kubectl cluster-info --> Returns info about the active kube clusters.
eg: PS C:\Windows\system32> kubectl cluster-info
    Kubernetes control plane is running at https://172.18.203.146:8443
    CoreDNS is running at https://172.18.203.146:8443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

--> kubectl get nodes --> fetches all the running nodes.
--> kubectl get pods --> fetches all the pods inside the kubernetes nodes
--> kubectl get namespaces --> fetches the kubernetes namespaces inside minikube server(kubernetes).
eg:
PS C:\Windows\system32> kubectl get namespaces
NAME              STATUS   AGE
default           Active   18m
kube-node-lease   Active   18m
kube-public       Active   18m
kube-system       Active   18m

//Gets the running pods of kube-system namespace, ie, master node
PS C:\Windows\system32> kubectl get pods --namespace=kube-system
NAME                               READY   STATUS    RESTARTS      AGE
coredns-7db6d8ff4d-2krjb           1/1     Running   0             23m
etcd-minikube                      1/1     Running   0             23m
kube-apiserver-minikube            1/1     Running   0             23m
kube-controller-manager-minikube   1/1     Running   0             23m
kube-proxy-khrmx                   1/1     Running   0             23m
kube-scheduler-minikube            1/1     Running   0             23m
storage-provisioner                1/1     Running   1 (23m ago)   23m

